Author: Ross Studtman

Tutorial: John Purcell's "The Java Spring Tutorial: Learn Java's Popular Web Framework"
John's website: CaveOfProgramming.com
Notes for videos 1 through 6

Video #1: What is Spring?
Video #2: Setting up the system
Video #3: Create Maven Project using Archetype
Video #4: Maven command line
Video #5: Maven project, no archetype, XML, beans
Video #6: Class Path Contexts, XML beans

Video 3 code: "Spring_tut_1" project
Video 5 code: "Spring_tut_2" project
Video 6 code: "Spring_tut_2" project


VIDEO #1: What is Spring?

	The biggest framework for creating web applications using Java.
	
	Has good database support - connect to them, work with them.
	
	You CAN, of course, create websites with Java (see John's JSPs and Servlets
	tutorial. But Spring is designed to make that process better.
	
		How better? The word "organizes your code" better keeps popping up.
		
	Other words tossed about but we'll learn when we get there:
	
		injection; aspect-oriented programming; 
		
		
VIDEO #2: Setting Up Your System for Spring


	- JDK - I'm using jdk1.8.0_05
		found at Program Files/Java/jdk1.8.0_05
		
	- ECLIPSE: 
	
		My version of Eclipse is Kepler, version 4.3.2, Java EE for Developers.
		
	- Install eclipse plugins: Help/Eclipse Marketplace
	
		Search for "Maven Integration for Eclipse"
		
		https://www.eclipse.org/m2e/download/
		
			- At that website I simply dragged and dropped the "Install"
			button/link at the top (hover over it, it says to drag onto
			a running Eclipse) .... but there were some errors.
			
			After a bit of internet searching I decided it would be
			best to upgrade Eclipse to Luna:
	
		https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1
		
		In that list of what is included it says "Maven Integration for Eclipse".
		
			AND, when searcing in Eclipse's marketplace for "Maven Integration for Eclipse"
			the Installed tab shows those are already there.
			
		Now, as John notes, look for "Spring ide eclipse" in Eclipse's marketplace.
		
			I did that and chose "Spring IDE 3.6.2.RELEASE" -- clicked install and
			crossed my fingers. I chose to leave everything selected in the checkboxes.
			
			...annnnd problems ;*(
			
			After a couple of minutes was presented with "Confirm selected features"
			with the warning "The installation cannot be completed as requested." 
			
			"Choose one of the following alternate solutions:"
			
			"Keep my installation the same and modify the items beign installed to be compatible."
			
			In the "Solution Details" it reports "Spring IDE Roo Support" will not be installed.
			
			By selecting the "Show original error" radio button there's this:
			
			
Cannot complete the install because of a conflicting dependency.
  Software being installed: Spring IDE Roo Support 3.6.2.201410090854-RELEASE 
  (org.springframework.ide.eclipse.roo.feature.feature.group 3.6.2.201410090854-RELEASE)
  Software currently installed: Eclipse IDE for Java EE Developers 4.4.1.20140925-1820 
  (epp.package.jee 4.4.1.20140925-1820)
  Only one of the following can be installed at once: 
    Java Development Tools UI 3.8.2.v20130107-165834 
	(org.eclipse.jdt.ui 3.8.2.v20130107-165834)
    Java Development Tools UI 3.10.0.v20140604-1403 
	(org.eclipse.jdt.ui 3.10.0.v20140604-1403)
    Java Development Tools UI 3.10.1.v20140817-1500 
	(org.eclipse.jdt.ui 3.10.1.v20140817-1500)
  Cannot satisfy dependency:
    From: Eclipse IDE for Java EE Developers 4.4.1.20140925-1820 
	(epp.package.jee 4.4.1.20140925-1820)
    To: org.eclipse.epp.package.jee.feature.feature.group [4.4.1.20140925-1820]
  Cannot satisfy dependency:
    From: AspectJ Development Tools 2.2.0.e37x-RELEASE-20120704-0900 
	(org.eclipse.ajdt.feature.group 2.2.0.e37x-RELEASE-20120704-0900)
    To: org.eclipse.ajdt.ui [2.2.0.e37x-RELEASE-20120704-0900]
  Cannot satisfy dependency:
    From: AspectJ Development Tools UI 2.2.0.e37x-RELEASE-20120704-0900 
	(org.eclipse.ajdt.ui 2.2.0.e37x-RELEASE-20120704-0900)
    To: bundle org.eclipse.jdt.ui [3.6.0,3.9.0)
  Cannot satisfy dependency:
    From: EPP Java EE IDE Feature 4.4.1.20140925-1820 
	(org.eclipse.epp.package.jee.feature.feature.group 4.4.1.20140925-1820)
    To: org.eclipse.jdt.feature.group 0.0.0
  Cannot satisfy dependency:
    From: Eclipse Java Development Tools 3.10.0.v20140606-1536 
	(org.eclipse.jdt.feature.group 3.10.0.v20140606-1536)
    To: org.eclipse.jdt.ui [3.10.0.v20140604-1403]
  Cannot satisfy dependency:
    From: Eclipse Java Development Tools 3.10.0.v20140925-0400 
	(org.eclipse.jdt.feature.group 3.10.0.v20140925-0400)
    To: org.eclipse.jdt.ui [3.10.1.v20140817-1500]
  Cannot satisfy dependency:
    From: Spring IDE Roo Support 3.6.2.201410090854-RELEASE 
	(org.springframework.ide.eclipse.roo.feature.feature.group 3.6.2.201410090854-RELEASE)
    To: org.eclipse.ajdt.feature.group 2.0.1
			
			
		...so whatever all that is saying, it feels a whole lot like "lame."
		
		I'll cross my fingers again (for all the help that did the first time) and select 
		"keep my installation the same and modify the items being installed to be compatible."
		
		...which will not install "Spring IDE Roo Support"
		
			...here's to hoping "Roo" isn't necessary.
			
	
	- TOMCAT
	
		You will need to install Apache Tomcat.
		
		Refer to John's free videos in the JSPs and Servlets tutorial.
		
		I have a set of notes for the JSPs and Servlets tutorial at:
		
		https://github.com/RossStudtman/JSP_Tutorials
		
		Some notes from video #2 of that series:
		
			I installed Apache Tomcat 7.0.
			
			It resides at Program Files/Apache Software Foundation/Tomcat 7.0
			
			In my "All Programs" in the Windows Start button is the Tomcat 7
			and the Monitor Tomcat application. When I run that it currently
			shows Tomcat is "stopped" with an option to start it.
			
			Eclipse, "Servers" tab - click wizard. 
			
			Video #2 of this series does a good job, have a look at it.
		
		
		
VIDEO #3: Create a Maven Project in Eclipse

	
	In Eclipse: 
	
		New / Maven / Maven Project
		
		Wizard pops up:
		
		- 1st page - accept defaults
		
		- 2nd page - maven archetypes. 
		
			- Archetypes: these contain different folders and structures that one might
			  need for various projects.
			  
			- Filter "quickstart" and select "maven-archetype-quickstart".
			
				- This is a basic, java program. 
				
		- 3rd page - Group ID and Artifact ID
		
			- Enter a "Group ID" name - follow package name conventions.
			
				For me, I'm simply going to use Spring_Tutorial_1
				
			- Enter an "Artifact ID" - it can be whatever you want.
			
				I'll use "vid3"
				
			Click finish.
			
	
	Having a look at and talking about:
	
		src files that are automatically created. (App.java).
		
		Maven automatically downloaded .jar files based on the Archetype selected.
		
			Found in "Maven Dependencies".
			
		pom.xml
		
	Run the App.java file.
	
		Admire the "hello world" in the console.
		
	pom.xml (project object model)
	
		click depencies tab, click add, search for "springframework" 
		
		...actually mine is not working like the video. I type in this
		dialog box:
		
		"Enter groupID, artifactId, or sha1 prefix or pattern (*):" 
		
		...and it says "Artifact Id cannot be empty" down below.
		
		...look at all the comments attached to this video for people
		having similar issues.
		
		I did:
		
			window/preferences/maven: checkbox for "download repository
			index updates on startup" as that was suggested for a fix.
			
			Restart Eclipse.
			
			Issue fixed. 
		
		look for spring-core, click the down-arrow on left to see
		a list of available .jar versions, select latest version.
		
		Click okay.
		
		SAVE project to see updated Dependencies in Project Explorer.
		
		
		
VIDEO #4: Maven on the command line

	You don't need to download the maven utility or use the command line.
	
	This video is to give an idea of what the maven app, if you download it, is for.
	
	In short, we will use maven to aquire .jar files.
	
	

VIDEO #5: Hello World

	
	Create new Maven project: file / new / maven project
	
		Wizard page 1: just for variety, click create simple project, skip archetype.	
				
		Wizard page 2: Group ID (like a package name) and Artifact ID (like a project name)	

		click finish.
		
	Unlike in video 3, there is no simple, default project set up. So lets create stuff!
	
	R-click project / new / class 
	
		- name it ("HelloWorld")
		- package ("vid_5")
		- give it a main method
		
		click finish.
		
		Note: package "vid_5" is in "src/main/java"
		
	
	Goal: create a POJO (plain ordinary java object), which will be a Spring 'bean',
	and instantiate with Spring.
	
	
	Create new class in vid_5 package:
	
		Vid_5_Person
		------------
		+speak(): void
		
	Instantiate Vid_5_Person in HelloWorld and call speak method.
	
	
	What we just did, that was plain java. Now lets use Maven to get .jars and use Spring.
	
	
	Open pom.xml - look at the raw XML, notice no dependencies. Click the dependencies tab.
	Click Add. Search for "springframework"...
	
		...John notes that there's no real good way to know exactly which .jar you need
		unless you just kind of know which dependencies you want. John selects the
		"spring-core" jar. Then clicks Add button again to add the "spring-beans" jar.
		And also add the "spring-context" jar.
		
		Notice in the Maven Dependencies folder there are now like 7 .jar files.
		Somehow, someway, Maven gets what it thinks you need by downloading those .jar
		files (so if your list does not *immediately* update in the project or package
		explorer, give it a second or two to download those files).
		
	Next goal: create an XML file that will instantiate the Vid_5_Person object.
	
		R-click project / new / Spring / Spring Bean Configuration File
		
			Wizard page 1: name it ("vid_5_bean")
			Wizard page 2: presented with Bean Definition choices, don't select any.
			
			click finish.
			
		- Note: it is important to have added this XML file to the root of the project,
		  the working directory, hence why the r-click on the project and not some 
		  subfolder. Later we will move these to their own package.
		  
		Now that the XML file is created we can add a bean to the file:
		
			click 'beans' tab.
			click 'new bean' button.
			
				Give this bean an id - it can be any name you like ("vid_5_person").
				
				Assign this bean a class - give it the Vid_5_Person class to work with.
				(click browse afer typing in class name so you can import fully qualified
				package name).
				
			click finish.
			
		Open the source of the XML file, admire the new addition:
		
			<bean id="vid_5_person" class="vid_5.Vid_5_Person"></bean>
			
	
	Next goal: create java code that will create a Spring bean container to read the XML
	file we created and instantiate a Vid_5_Person object.
	
		[ ] HelloWorld
		
			ApplicationContext context; // an interface
			
				- You *should* be able to import that class because that class resides
				  inside one of the .jar files you downloaded as a dependency. If you
				  don't have the option to add the import then you're missing a 
				  dependency.
				  
				- If you look in the Maven Dependencies folder, open the spring-context
				  .jar file, open the org.springframework.context package, you will see
				  the ApplicationContext.class file staring back at you. 
				  
			ApplicationContext is a container that can instantiate beans and then we can
			get the beans from the container. Here is the documentation for that class:
			
http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html
			
			At that site you'll note 'BeanFactory' is a super interface for ApplicationContext.
			As is typical with inheritence, the super class/interface is less specific. John
			is deciding on ApplicationContext as the interface because he wants something
			more specific.
			
			John mentions that there are many classes he could instantiate and assign to the
			ApplicationContext interface. Have a look at the documentation to see them, there
			are like 20 of them.
			
			John decides to instantiate the FileSystemXmlApplicationContext class:
			
			ApplicationContext context = new FileSystemXmlApplicationContext("vid_5_bean.xml");
			
				...argument is our XML file that associates a Bean with our Vid_5_Person bean.
				(the argument doesn't need a path name because we put vid_5_bean.xml in the
				root of our project).
				
			We can now use the ApplicationContext object to get at our beans.
			
				Vid_5_Person person = (Vid_5_Person)context.getBean("vid_5_person");
				
					...the argument here is the ID we gave the bean in Vid_5_bean.xml.
					
				person.speak();			
				
	Summary:
	
		Create your standard Java main-method class.
		
		Create a POJO, or Bean in Spring lingo.
		
		Create an XML file that assigns an ID and CLASS to a bean.
		
		In main-method class create ApplicationContext object, pass it the name of the XML
		file that contains IDs and CLASS associations for beans we have created.
		
		Use the ApplicationContext object to instantiate a bean.
				
			
				
VIDEO #6: Class Path Contexts

	First order of business, close the ApplicationContext from the previous video:
	
	[ ] HelloWorld:
	
		// to close the ApplicationContext
		((FileSystemXmlApplicationContext)context).close();
		
	
				
	Goal: organize XMLs that contain beans. Although we have only 1 currently, imagine we 
	had	a bunch of them. We can put them in a folder or package.
	
		Let's create a package for holding beans:
	
		R-click src/main/java / new / package / give it a name: vid_6.beans
			
		John then drags and drops the vid_5_bean.xml into that folder. But, since I 
		don't want to mess up video 5's code and notes, and I could use the practice, 
		I'll create	an entirely new XML for holding beans. I'll do like John does, 
		create it in the root folder and then drag and drop it into vid_5.beans package.
		
		That process again:
		
			1. R-click project / new / Spring / Spring Bean Configuration File
			2. Name the file: vid_6_beans
			3. click finish.
			4. Click 'beans' tab near bottom of Elcipse window.
			5. Click "New Bean..." button.
			6. ID: how I'll identify this bean: vid_6_bean
			7. Class: which class to associate the xml bean with: Vid_5_Person.
			
			vid_6_beans.xml now has:
			
				<bean id="vid_6_bean" class="vid_5.Vid_5_Person"></bean>
				
			Now, drag and drop vid_6_beans into vid_6_beans package.
			
		[ ] HelloWorld
		
			Create a new ApplicationContext and point it to the vid_6_beans.xml.
			
				- John does something cool here: r-click the vid_6_beans.xml and select
				  "copy qualified name" to save yourself some typing, then past that into
				  the ApplicationContext constructor:
				  
ApplicationContext vid6context = new FileSystemXmlApplicationContext("/Spring_tut_2/src/main/java/vid_6_beans/vid_6_beans.xml");
				  
			...but you don't want all of that. I ran that and got a FielNotFoundException, 
			"The system cannot find the path specified".
			
			So I change it like John shows to:
			
ApplicationContext vid6context = new FileSystemXmlApplicationContext("/src/main/java/vid_6_beans/vid_6_beans.xml");			
			
			...and now I have a relative path to the programs working directory
			and when I run it no exceptions are thrown.
	
	
	What if you want to load vid_6_beans.xml from any folder on the class path?
	
		-note: our packages exist on the class path.
	
		Use ClassPathXmlApplicationContext constructor instead of FileSystemXml...
		
		ApplicationContext vid6ClassPath = new ClassPathXmlApplicationContext();
		
		The argument I pass to that can now simply be the package and xml file:
		
ApplicationContext vid6ClassPath = new ClassPathXmlApplicationContext("vid_6_beans/vid_6_beans.xml");		
		
		
THE END.